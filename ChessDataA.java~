import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class ChessDataA {
  //public static int total = 0;

  protected static enum MATCH_COUNTER {
    TOTAL_COUNT
  };

  public static class TokenizerMapper
       extends Mapper<Object, Text, Text, IntWritable>{
    
    private final static IntWritable one = new IntWritable(1);
    private Text winner = new Text();

    public void map(Object key, Text value, Context context
                    ) throws IOException, InterruptedException {
      StringTokenizer itr = new StringTokenizer(value.toString());
      while (itr.hasMoreTokens()) {
        //ChessDataA.total++;
	String token = itr.nextToken();
	if (token.equals("0-1")) {
	  winner.set("Black");
	} else if (token.equals("1-0")) {
	  winner.set("White");
	} else if (token.equals("1/2-1/2")) {
	  winner.set("Draw");
	} else {
	  continue;
        }
	context.getCounter(MATCH_COUNTER.TOTAL_COUNT).increment(1L);
        context.write(winner, one);
      }
    }
  }

  public static class SumReducer
       extends Reducer<Text,IntWritable,Text,Text> {
    //private IntWritable result = new IntWritable();
    private Text result = new Text();

    private long total = 0;
    @Override
    public void configure(Configuration conf) {
        JobClient client = new JobClient(conf);
        RunningJob parentJob = client.getJob(JobID.forName( conf.get("chess data") ));
        total = parentJob.getCounters().getCounter(MAP_COUNTER_NAME);
    }

    public void reduce(Text key, Iterable<IntWritable> values,
                       Context context
                       ) throws IOException, InterruptedException {
      int sum = 0;
      for (IntWritable val : values) {
        sum += val.get();
      }
      //long total = context.getCounter(MATCH_COUNTER.TOTAL_COUNT).getValue();
      double rate = (double) sum / (double) total;
      result.set(total + "");
      context.write(key, result);
    }
  }

  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, "chess data");
    job.setJarByClass(ChessDataA.class);
    job.setMapperClass(TokenizerMapper.class);
    //job.setCombinerClass(SumReducer.class);
    job.setReducerClass(SumReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}
